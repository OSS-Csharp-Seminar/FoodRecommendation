// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace WebAPI.CompiledModels
{
    public partial class DatabaseContextModel
    {
        partial void Initialize()
        {
            var city = CityEntityType.Create(this);
            var food = FoodEntityType.Create(this);
            var food_category = Food_categoryEntityType.Create(this);
            var restaurant = RestaurantEntityType.Create(this);
            var restaurant_Food = Restaurant_FoodEntityType.Create(this);

            FoodEntityType.CreateForeignKey1(food, food_category);
            RestaurantEntityType.CreateForeignKey1(restaurant, city);
            Restaurant_FoodEntityType.CreateForeignKey1(restaurant_Food, food);
            Restaurant_FoodEntityType.CreateForeignKey2(restaurant_Food, restaurant);

            CityEntityType.CreateAnnotations(city);
            FoodEntityType.CreateAnnotations(food);
            Food_categoryEntityType.CreateAnnotations(food_category);
            RestaurantEntityType.CreateAnnotations(restaurant);
            Restaurant_FoodEntityType.CreateAnnotations(restaurant_Food);

            AddAnnotation("ProductVersion", "8.0.6");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var city = FindEntityType("Core.Entiteti.City")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            city.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var coreEntitetiCityTableBase = new TableBase("Core.Entiteti.City", null, relationalModel);
            var city_codeColumnBase = new ColumnBase<ColumnMappingBase>("City_code", "nvarchar(10)", coreEntitetiCityTableBase);
            coreEntitetiCityTableBase.Columns.Add("City_code", city_codeColumnBase);
            var countyColumnBase = new ColumnBase<ColumnMappingBase>("County", "nvarchar(100)", coreEntitetiCityTableBase);
            coreEntitetiCityTableBase.Columns.Add("County", countyColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", coreEntitetiCityTableBase);
            coreEntitetiCityTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(100)", coreEntitetiCityTableBase);
            coreEntitetiCityTableBase.Columns.Add("Name", nameColumnBase);
            var zIPColumnBase = new ColumnBase<ColumnMappingBase>("ZIP", "nvarchar(10)", coreEntitetiCityTableBase);
            coreEntitetiCityTableBase.Columns.Add("ZIP", zIPColumnBase);
            relationalModel.DefaultTables.Add("Core.Entiteti.City", coreEntitetiCityTableBase);
            var coreEntitetiCityMappingBase = new TableMappingBase<ColumnMappingBase>(city, coreEntitetiCityTableBase, true);
            coreEntitetiCityTableBase.AddTypeMapping(coreEntitetiCityMappingBase, false);
            defaultTableMappings.Add(coreEntitetiCityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, city.FindProperty("Id")!, coreEntitetiCityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)city_codeColumnBase, city.FindProperty("City_code")!, coreEntitetiCityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)countyColumnBase, city.FindProperty("County")!, coreEntitetiCityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, city.FindProperty("Name")!, coreEntitetiCityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)zIPColumnBase, city.FindProperty("ZIP")!, coreEntitetiCityMappingBase);

            var tableMappings = new List<TableMapping>();
            city.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var cityTable = new Table("City", null, relationalModel);
            var idColumn = new Column("Id", "uniqueidentifier", cityTable);
            cityTable.Columns.Add("Id", idColumn);
            var city_codeColumn = new Column("City_code", "nvarchar(10)", cityTable);
            cityTable.Columns.Add("City_code", city_codeColumn);
            var countyColumn = new Column("County", "nvarchar(100)", cityTable);
            cityTable.Columns.Add("County", countyColumn);
            var nameColumn = new Column("Name", "nvarchar(100)", cityTable);
            cityTable.Columns.Add("Name", nameColumn);
            var zIPColumn = new Column("ZIP", "nvarchar(10)", cityTable);
            cityTable.Columns.Add("ZIP", zIPColumn);
            var pK_City = new UniqueConstraint("PK_City", cityTable, new[] { idColumn });
            cityTable.PrimaryKey = pK_City;
            var pK_CityUc = RelationalModel.GetKey(this,
                "Core.Entiteti.City",
                new[] { "Id" });
            pK_City.MappedKeys.Add(pK_CityUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CityUc).Add(pK_City);
            cityTable.UniqueConstraints.Add("PK_City", pK_City);
            relationalModel.Tables.Add(("City", null), cityTable);
            var cityTableMapping = new TableMapping(city, cityTable, true);
            cityTable.AddTypeMapping(cityTableMapping, false);
            tableMappings.Add(cityTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, city.FindProperty("Id")!, cityTableMapping);
            RelationalModel.CreateColumnMapping(city_codeColumn, city.FindProperty("City_code")!, cityTableMapping);
            RelationalModel.CreateColumnMapping(countyColumn, city.FindProperty("County")!, cityTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, city.FindProperty("Name")!, cityTableMapping);
            RelationalModel.CreateColumnMapping(zIPColumn, city.FindProperty("ZIP")!, cityTableMapping);

            var food = FindEntityType("Core.Entiteti.Food")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            food.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var coreEntitetiFoodTableBase = new TableBase("Core.Entiteti.Food", null, relationalModel);
            var category_IDColumnBase = new ColumnBase<ColumnMappingBase>("Category_ID", "uniqueidentifier", coreEntitetiFoodTableBase);
            coreEntitetiFoodTableBase.Columns.Add("Category_ID", category_IDColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(100)", coreEntitetiFoodTableBase);
            coreEntitetiFoodTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", coreEntitetiFoodTableBase);
            coreEntitetiFoodTableBase.Columns.Add("Id", idColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(100)", coreEntitetiFoodTableBase);
            coreEntitetiFoodTableBase.Columns.Add("Name", nameColumnBase0);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("Price", "decimal(18,2)", coreEntitetiFoodTableBase);
            coreEntitetiFoodTableBase.Columns.Add("Price", priceColumnBase);
            relationalModel.DefaultTables.Add("Core.Entiteti.Food", coreEntitetiFoodTableBase);
            var coreEntitetiFoodMappingBase = new TableMappingBase<ColumnMappingBase>(food, coreEntitetiFoodTableBase, true);
            coreEntitetiFoodTableBase.AddTypeMapping(coreEntitetiFoodMappingBase, false);
            defaultTableMappings0.Add(coreEntitetiFoodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, food.FindProperty("Id")!, coreEntitetiFoodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)category_IDColumnBase, food.FindProperty("Category_ID")!, coreEntitetiFoodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, food.FindProperty("Description")!, coreEntitetiFoodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, food.FindProperty("Name")!, coreEntitetiFoodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase, food.FindProperty("Price")!, coreEntitetiFoodMappingBase);

            var tableMappings0 = new List<TableMapping>();
            food.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var foodTable = new Table("Food", null, relationalModel);
            var idColumn0 = new Column("Id", "uniqueidentifier", foodTable);
            foodTable.Columns.Add("Id", idColumn0);
            var category_IDColumn = new Column("Category_ID", "uniqueidentifier", foodTable);
            foodTable.Columns.Add("Category_ID", category_IDColumn);
            var descriptionColumn = new Column("Description", "nvarchar(100)", foodTable);
            foodTable.Columns.Add("Description", descriptionColumn);
            var nameColumn0 = new Column("Name", "nvarchar(100)", foodTable);
            foodTable.Columns.Add("Name", nameColumn0);
            var priceColumn = new Column("Price", "decimal(18,2)", foodTable);
            foodTable.Columns.Add("Price", priceColumn);
            var pK_Food = new UniqueConstraint("PK_Food", foodTable, new[] { idColumn0 });
            foodTable.PrimaryKey = pK_Food;
            var pK_FoodUc = RelationalModel.GetKey(this,
                "Core.Entiteti.Food",
                new[] { "Id" });
            pK_Food.MappedKeys.Add(pK_FoodUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FoodUc).Add(pK_Food);
            foodTable.UniqueConstraints.Add("PK_Food", pK_Food);
            var iX_Food_Category_ID = new TableIndex(
            "IX_Food_Category_ID", foodTable, new[] { category_IDColumn }, false);
            var iX_Food_Category_IDIx = RelationalModel.GetIndex(this,
                "Core.Entiteti.Food",
                new[] { "Category_ID" });
            iX_Food_Category_ID.MappedIndexes.Add(iX_Food_Category_IDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Food_Category_IDIx).Add(iX_Food_Category_ID);
            foodTable.Indexes.Add("IX_Food_Category_ID", iX_Food_Category_ID);
            relationalModel.Tables.Add(("Food", null), foodTable);
            var foodTableMapping = new TableMapping(food, foodTable, true);
            foodTable.AddTypeMapping(foodTableMapping, false);
            tableMappings0.Add(foodTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, food.FindProperty("Id")!, foodTableMapping);
            RelationalModel.CreateColumnMapping(category_IDColumn, food.FindProperty("Category_ID")!, foodTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, food.FindProperty("Description")!, foodTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, food.FindProperty("Name")!, foodTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn, food.FindProperty("Price")!, foodTableMapping);

            var food_category = FindEntityType("Core.Entiteti.Food_category")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            food_category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var coreEntitetiFood_categoryTableBase = new TableBase("Core.Entiteti.Food_category", null, relationalModel);
            var categoryColumnBase = new ColumnBase<ColumnMappingBase>("Category", "nvarchar(100)", coreEntitetiFood_categoryTableBase);
            coreEntitetiFood_categoryTableBase.Columns.Add("Category", categoryColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", coreEntitetiFood_categoryTableBase);
            coreEntitetiFood_categoryTableBase.Columns.Add("Id", idColumnBase1);
            relationalModel.DefaultTables.Add("Core.Entiteti.Food_category", coreEntitetiFood_categoryTableBase);
            var coreEntitetiFood_categoryMappingBase = new TableMappingBase<ColumnMappingBase>(food_category, coreEntitetiFood_categoryTableBase, true);
            coreEntitetiFood_categoryTableBase.AddTypeMapping(coreEntitetiFood_categoryMappingBase, false);
            defaultTableMappings1.Add(coreEntitetiFood_categoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, food_category.FindProperty("Id")!, coreEntitetiFood_categoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryColumnBase, food_category.FindProperty("Category")!, coreEntitetiFood_categoryMappingBase);

            var tableMappings1 = new List<TableMapping>();
            food_category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var food_categoryTable = new Table("Food_category", null, relationalModel);
            var idColumn1 = new Column("Id", "uniqueidentifier", food_categoryTable);
            food_categoryTable.Columns.Add("Id", idColumn1);
            var categoryColumn = new Column("Category", "nvarchar(100)", food_categoryTable);
            food_categoryTable.Columns.Add("Category", categoryColumn);
            var pK_Food_category = new UniqueConstraint("PK_Food_category", food_categoryTable, new[] { idColumn1 });
            food_categoryTable.PrimaryKey = pK_Food_category;
            var pK_Food_categoryUc = RelationalModel.GetKey(this,
                "Core.Entiteti.Food_category",
                new[] { "Id" });
            pK_Food_category.MappedKeys.Add(pK_Food_categoryUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Food_categoryUc).Add(pK_Food_category);
            food_categoryTable.UniqueConstraints.Add("PK_Food_category", pK_Food_category);
            relationalModel.Tables.Add(("Food_category", null), food_categoryTable);
            var food_categoryTableMapping = new TableMapping(food_category, food_categoryTable, true);
            food_categoryTable.AddTypeMapping(food_categoryTableMapping, false);
            tableMappings1.Add(food_categoryTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, food_category.FindProperty("Id")!, food_categoryTableMapping);
            RelationalModel.CreateColumnMapping(categoryColumn, food_category.FindProperty("Category")!, food_categoryTableMapping);

            var restaurant = FindEntityType("Core.Entiteti.Restaurant")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            restaurant.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var coreEntitetiRestaurantTableBase = new TableBase("Core.Entiteti.Restaurant", null, relationalModel);
            var city_IDColumnBase = new ColumnBase<ColumnMappingBase>("City_ID", "uniqueidentifier", coreEntitetiRestaurantTableBase)
            {
                IsNullable = true
            };
            coreEntitetiRestaurantTableBase.Columns.Add("City_ID", city_IDColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", coreEntitetiRestaurantTableBase);
            coreEntitetiRestaurantTableBase.Columns.Add("Id", idColumnBase2);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(100)", coreEntitetiRestaurantTableBase);
            coreEntitetiRestaurantTableBase.Columns.Add("Name", nameColumnBase1);
            relationalModel.DefaultTables.Add("Core.Entiteti.Restaurant", coreEntitetiRestaurantTableBase);
            var coreEntitetiRestaurantMappingBase = new TableMappingBase<ColumnMappingBase>(restaurant, coreEntitetiRestaurantTableBase, true);
            coreEntitetiRestaurantTableBase.AddTypeMapping(coreEntitetiRestaurantMappingBase, false);
            defaultTableMappings2.Add(coreEntitetiRestaurantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, restaurant.FindProperty("Id")!, coreEntitetiRestaurantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)city_IDColumnBase, restaurant.FindProperty("City_ID")!, coreEntitetiRestaurantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, restaurant.FindProperty("Name")!, coreEntitetiRestaurantMappingBase);

            var tableMappings2 = new List<TableMapping>();
            restaurant.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var restaurantTable = new Table("Restaurant", null, relationalModel);
            var idColumn2 = new Column("Id", "uniqueidentifier", restaurantTable);
            restaurantTable.Columns.Add("Id", idColumn2);
            var city_IDColumn = new Column("City_ID", "uniqueidentifier", restaurantTable)
            {
                IsNullable = true
            };
            restaurantTable.Columns.Add("City_ID", city_IDColumn);
            var nameColumn1 = new Column("Name", "nvarchar(100)", restaurantTable);
            restaurantTable.Columns.Add("Name", nameColumn1);
            var pK_Restaurant = new UniqueConstraint("PK_Restaurant", restaurantTable, new[] { idColumn2 });
            restaurantTable.PrimaryKey = pK_Restaurant;
            var pK_RestaurantUc = RelationalModel.GetKey(this,
                "Core.Entiteti.Restaurant",
                new[] { "Id" });
            pK_Restaurant.MappedKeys.Add(pK_RestaurantUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RestaurantUc).Add(pK_Restaurant);
            restaurantTable.UniqueConstraints.Add("PK_Restaurant", pK_Restaurant);
            var iX_Restaurant_City_ID = new TableIndex(
            "IX_Restaurant_City_ID", restaurantTable, new[] { city_IDColumn }, false);
            var iX_Restaurant_City_IDIx = RelationalModel.GetIndex(this,
                "Core.Entiteti.Restaurant",
                new[] { "City_ID" });
            iX_Restaurant_City_ID.MappedIndexes.Add(iX_Restaurant_City_IDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Restaurant_City_IDIx).Add(iX_Restaurant_City_ID);
            restaurantTable.Indexes.Add("IX_Restaurant_City_ID", iX_Restaurant_City_ID);
            relationalModel.Tables.Add(("Restaurant", null), restaurantTable);
            var restaurantTableMapping = new TableMapping(restaurant, restaurantTable, true);
            restaurantTable.AddTypeMapping(restaurantTableMapping, false);
            tableMappings2.Add(restaurantTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, restaurant.FindProperty("Id")!, restaurantTableMapping);
            RelationalModel.CreateColumnMapping(city_IDColumn, restaurant.FindProperty("City_ID")!, restaurantTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, restaurant.FindProperty("Name")!, restaurantTableMapping);

            var restaurant_Food = FindEntityType("Core.Entiteti.Restaurant_Food")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            restaurant_Food.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var coreEntitetiRestaurant_FoodTableBase = new TableBase("Core.Entiteti.Restaurant_Food", null, relationalModel);
            var food_IDColumnBase = new ColumnBase<ColumnMappingBase>("Food_ID", "uniqueidentifier", coreEntitetiRestaurant_FoodTableBase);
            coreEntitetiRestaurant_FoodTableBase.Columns.Add("Food_ID", food_IDColumnBase);
            var restaurant_IDColumnBase = new ColumnBase<ColumnMappingBase>("Restaurant_ID", "uniqueidentifier", coreEntitetiRestaurant_FoodTableBase);
            coreEntitetiRestaurant_FoodTableBase.Columns.Add("Restaurant_ID", restaurant_IDColumnBase);
            relationalModel.DefaultTables.Add("Core.Entiteti.Restaurant_Food", coreEntitetiRestaurant_FoodTableBase);
            var coreEntitetiRestaurant_FoodMappingBase = new TableMappingBase<ColumnMappingBase>(restaurant_Food, coreEntitetiRestaurant_FoodTableBase, true);
            coreEntitetiRestaurant_FoodTableBase.AddTypeMapping(coreEntitetiRestaurant_FoodMappingBase, false);
            defaultTableMappings3.Add(coreEntitetiRestaurant_FoodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)food_IDColumnBase, restaurant_Food.FindProperty("Food_ID")!, coreEntitetiRestaurant_FoodMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)restaurant_IDColumnBase, restaurant_Food.FindProperty("Restaurant_ID")!, coreEntitetiRestaurant_FoodMappingBase);

            var tableMappings3 = new List<TableMapping>();
            restaurant_Food.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var restaurant_FoodTable = new Table("Restaurant_Food", null, relationalModel);
            var food_IDColumn = new Column("Food_ID", "uniqueidentifier", restaurant_FoodTable);
            restaurant_FoodTable.Columns.Add("Food_ID", food_IDColumn);
            var restaurant_IDColumn = new Column("Restaurant_ID", "uniqueidentifier", restaurant_FoodTable);
            restaurant_FoodTable.Columns.Add("Restaurant_ID", restaurant_IDColumn);
            var pK_Restaurant_Food = new UniqueConstraint("PK_Restaurant_Food", restaurant_FoodTable, new[] { food_IDColumn, restaurant_IDColumn });
            restaurant_FoodTable.PrimaryKey = pK_Restaurant_Food;
            var pK_Restaurant_FoodUc = RelationalModel.GetKey(this,
                "Core.Entiteti.Restaurant_Food",
                new[] { "Food_ID", "Restaurant_ID" });
            pK_Restaurant_Food.MappedKeys.Add(pK_Restaurant_FoodUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_Restaurant_FoodUc).Add(pK_Restaurant_Food);
            restaurant_FoodTable.UniqueConstraints.Add("PK_Restaurant_Food", pK_Restaurant_Food);
            var iX_Restaurant_Food_Restaurant_ID = new TableIndex(
            "IX_Restaurant_Food_Restaurant_ID", restaurant_FoodTable, new[] { restaurant_IDColumn }, false);
            var iX_Restaurant_Food_Restaurant_IDIx = RelationalModel.GetIndex(this,
                "Core.Entiteti.Restaurant_Food",
                new[] { "Restaurant_ID" });
            iX_Restaurant_Food_Restaurant_ID.MappedIndexes.Add(iX_Restaurant_Food_Restaurant_IDIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Restaurant_Food_Restaurant_IDIx).Add(iX_Restaurant_Food_Restaurant_ID);
            restaurant_FoodTable.Indexes.Add("IX_Restaurant_Food_Restaurant_ID", iX_Restaurant_Food_Restaurant_ID);
            relationalModel.Tables.Add(("Restaurant_Food", null), restaurant_FoodTable);
            var restaurant_FoodTableMapping = new TableMapping(restaurant_Food, restaurant_FoodTable, true);
            restaurant_FoodTable.AddTypeMapping(restaurant_FoodTableMapping, false);
            tableMappings3.Add(restaurant_FoodTableMapping);
            RelationalModel.CreateColumnMapping(food_IDColumn, restaurant_Food.FindProperty("Food_ID")!, restaurant_FoodTableMapping);
            RelationalModel.CreateColumnMapping(restaurant_IDColumn, restaurant_Food.FindProperty("Restaurant_ID")!, restaurant_FoodTableMapping);
            var fK_Food_Food_category_Category_ID = new ForeignKeyConstraint(
                "FK_Food_Food_category_Category_ID", foodTable, food_categoryTable,
                new[] { category_IDColumn },
                food_categoryTable.FindUniqueConstraint("PK_Food_category")!, ReferentialAction.Cascade);
            var fK_Food_Food_category_Category_IDFk = RelationalModel.GetForeignKey(this,
                "Core.Entiteti.Food",
                new[] { "Category_ID" },
                "Core.Entiteti.Food_category",
                new[] { "Id" });
            fK_Food_Food_category_Category_ID.MappedForeignKeys.Add(fK_Food_Food_category_Category_IDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Food_Food_category_Category_IDFk).Add(fK_Food_Food_category_Category_ID);
            foodTable.ForeignKeyConstraints.Add(fK_Food_Food_category_Category_ID);
            food_categoryTable.ReferencingForeignKeyConstraints.Add(fK_Food_Food_category_Category_ID);
            var fK_Restaurant_City_City_ID = new ForeignKeyConstraint(
                "FK_Restaurant_City_City_ID", restaurantTable, cityTable,
                new[] { city_IDColumn },
                cityTable.FindUniqueConstraint("PK_City")!, ReferentialAction.NoAction);
            var fK_Restaurant_City_City_IDFk = RelationalModel.GetForeignKey(this,
                "Core.Entiteti.Restaurant",
                new[] { "City_ID" },
                "Core.Entiteti.City",
                new[] { "Id" });
            fK_Restaurant_City_City_ID.MappedForeignKeys.Add(fK_Restaurant_City_City_IDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Restaurant_City_City_IDFk).Add(fK_Restaurant_City_City_ID);
            restaurantTable.ForeignKeyConstraints.Add(fK_Restaurant_City_City_ID);
            cityTable.ReferencingForeignKeyConstraints.Add(fK_Restaurant_City_City_ID);
            var fK_Restaurant_Food_Food_Food_ID = new ForeignKeyConstraint(
                "FK_Restaurant_Food_Food_Food_ID", restaurant_FoodTable, foodTable,
                new[] { food_IDColumn },
                foodTable.FindUniqueConstraint("PK_Food")!, ReferentialAction.Cascade);
            var fK_Restaurant_Food_Food_Food_IDFk = RelationalModel.GetForeignKey(this,
                "Core.Entiteti.Restaurant_Food",
                new[] { "Food_ID" },
                "Core.Entiteti.Food",
                new[] { "Id" });
            fK_Restaurant_Food_Food_Food_ID.MappedForeignKeys.Add(fK_Restaurant_Food_Food_Food_IDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Restaurant_Food_Food_Food_IDFk).Add(fK_Restaurant_Food_Food_Food_ID);
            restaurant_FoodTable.ForeignKeyConstraints.Add(fK_Restaurant_Food_Food_Food_ID);
            foodTable.ReferencingForeignKeyConstraints.Add(fK_Restaurant_Food_Food_Food_ID);
            var fK_Restaurant_Food_Restaurant_Restaurant_ID = new ForeignKeyConstraint(
                "FK_Restaurant_Food_Restaurant_Restaurant_ID", restaurant_FoodTable, restaurantTable,
                new[] { restaurant_IDColumn },
                restaurantTable.FindUniqueConstraint("PK_Restaurant")!, ReferentialAction.Cascade);
            var fK_Restaurant_Food_Restaurant_Restaurant_IDFk = RelationalModel.GetForeignKey(this,
                "Core.Entiteti.Restaurant_Food",
                new[] { "Restaurant_ID" },
                "Core.Entiteti.Restaurant",
                new[] { "Id" });
            fK_Restaurant_Food_Restaurant_Restaurant_ID.MappedForeignKeys.Add(fK_Restaurant_Food_Restaurant_Restaurant_IDFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Restaurant_Food_Restaurant_Restaurant_IDFk).Add(fK_Restaurant_Food_Restaurant_Restaurant_ID);
            restaurant_FoodTable.ForeignKeyConstraints.Add(fK_Restaurant_Food_Restaurant_Restaurant_ID);
            restaurantTable.ReferencingForeignKeyConstraints.Add(fK_Restaurant_Food_Restaurant_Restaurant_ID);
            return relationalModel.MakeReadOnly();
        }
    }
}
